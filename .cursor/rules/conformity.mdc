---
description: 
globs: 
alwaysApply: true
---
# Multi-layered conformance validation strategy used to ensure compatibility with the original JPEG XL implementation:

## 1. **Automated Conformance Testing Pipeline**

The project uses a sophisticated CI/CD pipeline with dedicated conformance testing:

- **Conformance Test Suite**: Runs against the official JPEG XL conformance test images stored in `jxl/resources/test/conformance_test_images/` (38+ test images covering various features like alpha channels, animations, grayscale, progressive encoding, etc.)

- **Dual Output Validation**: Tests both ICC profile output and PNG conversion output against reference implementations using Python scripts (`ci/conformance_summary.py`, `ci/merge_conformance_report.py`)

- **External Reference**: Uses the [libjxl/bench](https://github.com/libjxl/bench) repository for conformance testing infrastructure and compares against the official C++ implementation

## 2. **Golden Data Validation**

Throughout the codebase, critical algorithms are validated using "golden data" generated by the original libjxl implementation:

```8:12:jxl/src/frame/quant_weights.rs
// Golden data produced by libjxl.
```

```204:204:jxl/src/render/stages/noise.rs
// Golden data generated by libjxl.
```

```801:801:jxl/src/features/spline.rs
// Golden data generated by libjxl.
```

## 3. **Behavioral Compatibility**

The code includes explicit compatibility notes and behavior matching:

- **Bit-level compatibility**: Comments like "To match the behaviour of libjxl, we limit nbits to 31"
- **Edge case handling**: Preserves libjxl's specific numerical choices and range checks
- **Algorithm fidelity**: Direct ports of complex algorithms (e.g., fast linear to sRGB conversion, DCT implementations)

## 4. **Comprehensive Test Coverage**

- **Unit tests**: Each module has extensive tests comparing against slow/reference implementations
- **Integration tests**: Macro-generated tests (`for_each_test_file`) automatically create test cases for all `.jxl` test files
- **Cross-validation**: Tests compare optimized implementations against slower, more obviously correct versions

## 5. **Multi-Format Validation**

The conformance tests validate:
- **ICC profile handling**: Ensures color management matches reference
- **PNG output**: Validates pixel-perfect output through PNG conversion
- **Frame-by-frame comparison**: For animated content, validates each frame individually

## 6. **Continuous Integration**

Every pull request runs:
- Standard unit/integration tests
- Full conformance test suite
- Coverage analysis
- Both ICC and PNG output validation

The strategy prioritizes **correctness over performance** initially, implementing slower but obviously correct algorithms first, then optimizing while maintaining compatibility through extensive golden data validation. This ensures the Rust implementation produces byte-exact or visually identical output to the original libjxl C++ implementation.